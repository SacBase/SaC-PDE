/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * We use red-black successive underrelaxation as smoother.
 **/

use StdIO: all;
use Math: all;
use Array: all;

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

//inline
//double[n, n] stencil_far(double[n, n] x, double[3, 3] w)
//{
//  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
//             | iv < shp};
//  return {iv -> sum({jv -> w[jv] * x[mod(iv + (jv - [1, 1]) * n / 2,
//                                         [n / 2, n / 2])]
//              | iv < [n / 2, n / 2]};
//}

double[n, n] to_red_black(double[n, n] x)
{
  y = reshape([n / 2, 2, n / 2, 2], x);
  z = {[i, j, k, l] -> y[j, i, l, k]};
  return reshape([n, n], z);
}

double[n, n] from_red_black(double[n, n] x)
{
  y = reshape([2, n / 2, 2, n / 2], x);
  z = {[i, j, k, l] -> y[j, i, l, k]};
  return reshape([n, n], z);
}

inline 
double[n, n] red_black_assemble(double[n2, n2] BB, double[n2, n2] BR,
                                double[n2, n2] RB, double[n2, n2] RR)
    | (n2 == n / 2)
{
  n = n2 * 2;

  return with {
            ([0    , 0    ] <= iv < [n / 2, n / 2]): BB[iv - [0    , 0    ]];
            ([0    , n / 2] <= iv < [n / 2, n    ]): BR[iv - [0    , n / 2]];
            ([n / 2, 0    ] <= iv < [n    , n / 2]): RB[iv - [n / 2, 0    ]];
            ([n / 2, n / 2] <= iv < [n    , n    ]): RR[iv - [n / 2, n / 2]];
         }: genarray([n, n], 0d);
}

inline
double[d:shp] manhattan_weights(double[d1] cs)
| (d1 == d + 1)
{
  ones = genarray([d1 - 1], 1);
  return {iv -> cs[sum(abs(iv - ones))] | iv < 3 * ones};
}

inline
double[d:shpo] fine2coarse(double[d:shpi] r)
{
  return {iv -> r[2 * iv] | iv < shpi / 2};
}

inline
double[d:shpo] coarse2fine(double[d:shpi] z)
{
  return {iv -> z[iv / 2] | iv < 2 * shpi step [2, 2]};
}

inline
double[n2, m2] restrict(double[n, m] x)
{
  return fine2coarse(stencil(x, 
                             manhattan_weights([1d, 1d / 2d, 1d / 4d]) / 4d));
}

inline
double[n2, m2] restrict_rb(double[n, m] x)
{
  BB = tile([n / 2, n / 2], [0    , 0    ], x);
  BR = tile([n / 2, n / 2], [0    , n / 2], x);
  RB = tile([n / 2, n / 2], [n / 2, 0    ], x);
  RR = tile([n / 2, n / 2], [n / 2, n / 2], x);

  res_BB = {iv -> (
                   BB[2 * iv] +
                   (
                     BR[mod(2 * iv + [0, 0], n / 2)] +
                     BR[mod(2 * iv - [0, 1], n / 2)] +
                     RB[mod(2 * iv + [0, 0], n / 2)] +
                     RB[mod(2 * iv - [1, 0], n / 2)]
                   ) / 2d +
                   (
                     RR[mod(2 * iv + [0, 0], n / 2)] +
                     RR[mod(2 * iv - [1, 0], n / 2)] +
                     RR[mod(2 * iv - [0, 1], n / 2)] +
                     RR[mod(2 * iv - [1, 1], n / 2)]
                   ) / 4d
                 ) / 4d
            | iv < [n / 4, n / 4]};

  res_BR = {iv -> (
                   BB[2 * iv + [0, 1]] +
                   (
                     BR[mod(2 * iv + [0, 1], n / 2)] +
                     BR[mod(2 * iv - [0, 0], n / 2)] +
                     RB[mod(2 * iv + [0, 1], n / 2)] +
                     RB[mod(2 * iv - [1, -1], n / 2)]
                   ) / 2d +
                   (
                     RR[mod(2 * iv + [0, 1], n / 2)] +
                     RR[mod(2 * iv - [1, -1], n / 2)] +
                     RR[mod(2 * iv - [0, 0], n / 2)] +
                     RR[mod(2 * iv - [1, 0], n / 2)]
                   ) / 4d
                 ) / 4d
            | iv < [n / 4, n / 4]};

  res_RB = {iv -> (
                   BB[2 * iv + [1, 0]] +
                   (
                     BR[mod(2 * iv + [1, 0], n / 2)] +
                     BR[mod(2 * iv - [-1, 1], n / 2)] +
                     RB[mod(2 * iv + [1, 0], n / 2)] +
                     RB[mod(2 * iv - [0, 0], n / 2)]
                   ) / 2d +
                   (
                     RR[mod(2 * iv + [1, 0], n / 2)] +
                     RR[mod(2 * iv - [0, 0], n / 2)] +
                     RR[mod(2 * iv - [-1, 1], n / 2)] +
                     RR[mod(2 * iv - [0, 1], n / 2)]
                   ) / 4d
                 ) / 4d
            | iv < [n / 4, n / 4]};

  res_RR = {iv -> (
                   BB[2 * iv + [1, 1]] +
                   (
                     BR[mod(2 * iv + [1, 1], n / 2)] +
                     BR[mod(2 * iv - [-1, 0], n / 2)] +
                     RB[mod(2 * iv + [1, 1], n / 2)] +
                     RB[mod(2 * iv - [0, -1], n / 2)]
                   ) / 2d +
                   (
                     RR[mod(2 * iv + [1, 1], n / 2)] +
                     RR[mod(2 * iv - [0, -1], n / 2)] +
                     RR[mod(2 * iv - [-1, 0], n / 2)] +
                     RR[mod(2 * iv - [0, 0], n / 2)]
                   ) / 4d
                 ) / 4d
            | iv < [n / 4, n / 4]};

  return red_black_assemble(res_BB, res_BR, res_RB, res_RR);
}

int main()
{
  n = 128;
  U = {[i, j] -> tod(10 * i + j) | [i, j] < [n, n]};

  U_rb = to_red_black(U);

  Us = restrict(U);
  Us_rb = restrict_rb(U_rb);

  check = from_red_black(Us_rb);

  if (!all(check == Us)) {
    printf("Incorrect!\n");
  } else {
    printf("Correct!\n");
  }

  return 0;
}
