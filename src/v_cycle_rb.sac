/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * We use red-black successive underrelaxation as smoother.
 **/

use StdIO: all;
use Math: all;
use Array: all;

inline
double f(double x, double y)
{
  return -2d * sin(x + y);
}

inline
double u(double x, double y)
{
  return sin(x + y);
}

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

double[n, n] to_red_black(double[n, n] x)
{
  y = reshape([n / 2, 2, n / 2, 2], x);
  z = {[i, j, k, l] -> y[j, i, l, k]};
  return reshape([n, n], z);
}

double[n, n] from_red_black(double[n, n] x)
{
  y = reshape([2, n / 2, 2, n / 2], x);
  z = {[i, j, k, l] -> y[j, i, l, k]};
  return reshape([n, n], z);
}

inline 
double[n, n] red_black_assemble(double[n2, n2] BB, double[n2, n2] BR,
                                double[n2, n2] RB, double[n2, n2] RR)
    | (n2 == n / 2)
{
  n = n2 * 2;

  return with {
            ([0    , 0    ] <= iv < [n / 2, n / 2]): BB[iv - [0    , 0    ]];
            ([0    , n / 2] <= iv < [n / 2, n    ]): BR[iv - [0    , n / 2]];
            ([n / 2, 0    ] <= iv < [n    , n / 2]): RB[iv - [n / 2, 0    ]];
            ([n / 2, n / 2] <= iv < [n    , n    ]): RR[iv - [n / 2, n / 2]];
         }: genarray([n, n], 0d);
}

inline
double[n, n] sor(double[n, n] u, double[n, n] f, double h, double omega)
{
  RB = tile([n / 2, n / 2], [n / 2, 0], u);
  BR = tile([n / 2, n / 2], [0, n / 2], u);

  update_BB = stencil(RB, [[0d, 1d, 0d],
                           [0d, 1d, 0d],
                           [0d, 0d, 0d]])
              +
              stencil(BR, [[0d, 0d, 0d],
                           [1d, 1d, 0d],
                           [0d, 0d, 0d]]);

  update_RR = stencil(RB, [[0d, 0d, 0d],
                           [0d, 1d, 1d],
                           [0d, 0d, 0d]])
              +
              stencil(BR, [[0d, 0d, 0d],
                           [0d, 1d, 0d],
                           [0d, 1d, 0d]]);

  BB = tile([n / 2, n / 2], [0, 0], u);
  f_BB = tile([n / 2, n / 2], [0, 0], f);
  BB = (1d - omega) * BB + omega / 4d * (update_BB - h * h * f_BB);

  RR = tile([n / 2, n / 2], [n / 2, n / 2], u);
  f_RR = tile([n / 2, n / 2], [n / 2, n / 2], f);
  RR = (1d - omega) * RR + omega / 4d * (update_RR - h * h * f_RR);

  update_BR = stencil(BB, [[0d, 0d, 0d],
                           [0d, 1d, 1d],
                           [0d, 0d, 0d]])
              +
              stencil(RR, [[0d, 1d, 0d],
                           [0d, 1d, 0d],
                           [0d, 0d, 0d]]);

  update_RB = stencil(BB, [[0d, 0d, 0d],
                           [0d, 1d, 0d],
                           [0d, 1d, 0d]])
              +
              stencil(RR, [[0d, 0d, 0d],
                           [1d, 1d, 0d],
                           [0d, 0d, 0d]]);

  f_BR = tile([n / 2, n / 2], [0, n / 2], f);
  BR = (1d - omega) * BR + omega / 4d * (update_BR - h * h * f_BR);

  f_RB = tile([n / 2, n / 2], [n / 2, 0], f);
  RB = (1d - omega) * RB + omega / 4d * (update_RB - h * h * f_RB);

  u = red_black_assemble(BB, BR, RB, RR);

  return u;
}

inline
double[n, n] five_point_rb(double[n, n] U, double h)
{
  BB = tile([n / 2, n / 2], [0, 0    ], U);
  BR = tile([n / 2, n / 2], [0, n / 2], U);
  RB = tile([n / 2, n / 2], [n / 2, 0    ], U);
  RR = tile([n / 2, n / 2], [n / 2, n / 2], U);

  res_BB = -4d * BB + stencil(BR, [[0d, 0d, 0d],
                                   [1d, 1d, 0d],
                                   [0d, 0d, 0d]]);
  res_BR = -4d * BR + stencil(BB, [[0d, 0d, 0d],
                                   [0d, 1d, 1d],
                                   [0d, 0d, 0d]]);

  res_RB = -4d * RB + stencil(RR, [[0d, 1d, 0d],
                                   [0d, 1d, 0d],
                                   [0d, 0d, 0d]]);
  res_RR = -4d * RR + stencil(RB, [[0d, 0d, 0d],
                                   [0d, 1d, 0d],
                                   [0d, 1d, 0d]]);

  res = red_black_assemble(res_BB, res_BR, res_RB, res_RR);

  return res;
}

inline
double[d:shp] manhattan_weights(double[d1] cs)
| (d1 == d + 1)
{
  ones = genarray([d1 - 1], 1);
  return {iv -> cs[sum(abs(iv - ones))] | iv < 3 * ones};
}

inline
double[d:shpo] fine2coarse(double[d:shpi] r)
{
  return {iv -> r[2 * iv] | iv < shpi / 2};
}

inline
double[d:shpo] coarse2fine(double[d:shpi] z)
{
  return {iv -> z[iv / 2] | iv < 2 * shpi step [2, 2]};
}

/* Interpolation */
inline
double[n2, m2] prolongate(double[n, m] x)
{
  return stencil(coarse2fine(x), manhattan_weights([1d, 1d / 2d, 1d / 4d])); 
}

/* Full-weighting operator: for P the interpolation matrix and d the
 * dimension, restrict is P^t / 2^d. */ 
inline
double[n2, m2] restrict(double[n, m] x)
{
  return fine2coarse(stencil(x, 
                             manhattan_weights([1d, 1d / 2d, 1d / 4d]) / 4d));
}

inline
double L2(double[d:shp] x)
{
  return sqrt(sum(x * x)) / tod(prod(shp));
}

inline
double[n, n] sor_solve(double[n, n] F, double h, int max_iter)
{
  U     = {[i, j] -> 0d | [i, j] < [n, n]};
  pi    = 4d * atan(1d);
  omega = 2d / (1d + sin(pi * h));
  error = 1e308;
  i = 0;

  while (error > h * h && i < max_iter) {
    U = sor(U, F, h, omega);
    if (i % 10 == 0) {
      new_error = L2(five_point_rb(U, h) - F) / L2(F);
      /**
       * Mathematically, the following condition is false.
       * However, if F(x - h) \approx F(x + h), 
       * then the relative error in computing F(x - h), F(x + h) is amplified
       * in the subtraction F(x + h) - F(x - h), which can cause these stability
       * issues.
       **/
      if (new_error > error) {
        i = max_iter;
      }
      error = new_error;
//      printf("Iter %d: relative error = %e, absolute = %e\n", i, error,
//             L2(five_point_rb(U, h) - F));
    }
    i++;
  }

  return U;
}

inline
double[n, n] v_cycle(double[n, n] F, double h)
{
  if (n <= 128) {
    U = sor_solve(F, h, 1000);
  } else {
    U = {[i, j] -> 0d | [i, j] < [n, n]};
    for (i = 0; i < 3; i++) {
      U = sor(U, F, h, 2d / 3d);
    }
  
    r_rb = F - five_point_rb(U, h);
    r = from_red_black(r_rb);

    r2h = restrict(r);
    r2h_rb = to_red_black(r2h);

    error2h_rb = v_cycle(-r2h_rb, 2d * h);
    error2h = from_red_black(error2h_rb);

    error = prolongate(error2h);
    U = U - to_red_black(error);
  
    for (i = 0; i < 3; i++) {
      U = sor(U, F, h, 2d / 3d);
    }
  }

  return U;
}

int main()
{
  pi = 4d * atan(1d);
  a = 0d;
  b = 2d * pi;
  n = 1024;
  h = (b - a) / tod(n);

  F = {[i, j] -> f(a + tod(i) * h, a + tod(j) * h)
              | [i, j] < [n, n]};
  Utrue = {[i, j] -> u(a + tod(i) * h, a + tod(j) * h)
                  | [i, j] < [n, n]};
  Utrue_rb = to_red_black(Utrue);
  F_rb = to_red_black(F);

  t = 0;
  U = v_cycle(F, h);
  for (t = 0; t < 5; t++) {
    r = F_rb - five_point_rb(U, h);
    U = U + v_cycle(r, h);
    printf("L2(r) = %e\n", L2(r));
    printf("Error: %e\n", L2(U - Utrue_rb) / L2(Utrue_rb));
  }

  return 0;
}
