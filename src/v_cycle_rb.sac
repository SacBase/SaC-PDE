/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * The technique uses a Gauss-Seidel update with successive overrelaxation.
 * We use red-black ordering so we can parallelise it. This is not exactly the 
 * same as the sequential Gauss-Seidel, but the convergence is similar.
 **/

use StdIO: all;
use Math: all;
use Array: all;
use Benchmarking: all;

double f(double x, double y)
{
  return -2d * sin(x + y);
}

double u(double x, double y)
{
  return sin(x + y);
}

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

double[n, n] five_point(double[n, n] U, double h)
{
  return stencil(U, [[0d,  1d, 0d],
                     [1d, -4d, 1d],
                     [0d,  1d, 0d]]) / (h * h);
}

/**
 * Generates a d-dimensional grid, where elements with Manhattan-distance 
 * i to the center have weights cs[i].
 **/
inline
double[d:shp] manhattan_weights(double[d1] cs)
| (d1 == d + 1)
{
  ones = genarray([d1 - 1], 1);
  return {iv -> cs[sum(abs(iv - ones))] | iv < 3 * ones};
}

inline
double[d:shpo] fine2coarse(double[d:shpi] r)
{
  return {iv -> r[2 * iv] | iv < shpi / 2};
}

inline
double[d:shpo] coarse2fine(double[d:shpi] z)
{
  return {iv -> z[iv / 2] | iv < 2 * shpi step [2, 2]};
}

/* Interpolation */
inline
double[n2, m2] prolongate(double[n, m] x)
{
  return stencil(coarse2fine(x), manhattan_weights([1d, 1d / 2d, 1d / 4d])); 
}

/* Full-weighting operator: for P the interpolation matrix and d the
 * dimension, restrict is P^t / 2^d. */ 
inline
double[n2, m2] restrict(double[n, m] x)
{
  return fine2coarse(stencil(x, 
                             manhattan_weights([1d, 1d / 2d, 1d / 4d]) / 4d));
}

inline
double L2(double[d:shp] x)
{
  return sqrt(sum(x * x)) / tod(prod(shp));
}

double[n, n2], double[n, n2] to_red_black(double[n, n] x)
  | (n2 == n / 2)
{
  black = {[i, j] -> x[i, 2 * j] 
                  | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
           [i, j] -> x[i, n - 2 * j - 1] 
                  | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};

  red   = {[i, j] -> x[i, 2 * j + 1]
                  | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
           [i, j] -> x[i, n - 2 * (j + 1)] 
                  | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};

  return (red, black);
}

double[n, n] from_red_black(double[n, n2] red, double[n, n2] black)
  | (n2 == n / 2)
{
  return with {
            ([0, 0] <= [i, j] < [n, n] step [2, 2]): black[i, j / 2];
            ([0, 1] <= [i, j] < [n, n] step [2, 2]): red  [i, j / 2];
            ([1, 0] <= [i, j] < [n, n] step [2, 2]): red  [i, (n - j - 1) / 2];
            ([1, 1] <= [i, j] < [n, n] step [2, 2]): black[i, (n - j) / 2];
         }: genarray([n, n], 0d);
}

/**
 * Weights are Manhattan distance to the central point, so equivalent to
 * weights [w[1], w[0], w[1]] in the more general case.
 **/
inline
double[n, n2], double[n, n2] 
stencil_rb(double[n, n2] x_red, double[n, n2] x_black, double[2] w)
{
  res_black = w[0] * x_black +
              w[1] * {[i, j] -> x_red[mod([i - 1, n2 - 1 - j], [n, n2])] +
                                x_red[mod([i    , j         ], [n, n2])] +
                                x_red[mod([i    , j  - 1    ], [n, n2])] +
                                x_red[mod([i + 1, n2 - 1 - j], [n, n2])]
                              | [i, j] < [n, n2]};

  res_red   = w[0] * x_red +
              w[1] * {[i, j] -> x_black[mod([i - 1, n2 - 1 - j], [n, n2])] +
                                x_black[mod([i    , j         ], [n, n2])] +
                                x_black[mod([i    , j  + 1    ], [n, n2])] +
                                x_black[mod([i + 1, n2 - 1 - j], [n, n2])]
                              | [i, j] < [n, n2]};
 
  return (res_red, res_black);
}

double L2_rb(double[d:shp] x, double[d:shp] y)
{
  return sqrt(sum(x * x) + sum(y * y));
}

inline
double[n, m], double[n, m] sor(double[n, m] u_red, double[n, m] u_black,
                               double[n, m] f_red, double[n, m] f_black,
                               double h, double omega)
  | (n == 2 * m && m % 2 == 0)
{
  update_red = {[i, j] -> u_red[mod([i - 1, m - 1 - j], [n, m])] +
                          u_red[mod([i    , j        ], [n, m])] +
                          u_red[mod([i    , j  - 1   ], [n, m])] +
                          u_red[mod([i + 1, m - 1 - j], [n, m])]
                       | [i, j] < [n, m]};

  u_black = (1d - omega) * u_black +
            omega / 4d * (update_red - h * h * f_black);

  update_black = {[i, j] -> u_black[mod([i - 1, m - 1 - j], [n, m])] +
                            u_black[mod([i    , j        ], [n, m])] +
                            u_black[mod([i    , j  + 1   ], [n, m])] +
                            u_black[mod([i + 1, m - 1 - j], [n, m])]
                         | [i, j] < [n, m]};

  u_red = (1d - omega) * u_red +
          omega / 4d * (update_black - h * h * f_red);

  return (u_red, u_black);
}

inline
double[n, n2], double[n, n2] 
sor_solve(double[n, n2] F_red, double[n, n2] F_black, 
          double h, double eps, int max_iter)
{
  U_red   = {iv -> 0d | iv < [n, n2]};
  U_black = {iv -> 0d | iv < [n, n2]};
  pi      = 4d * atan(1d);
  omega   = 2d / (1d + sin(pi * h));
  error   = 1e308;
  t       = 0;
  while (error > eps && t < max_iter) {
    U_red, U_black = sor(U_red, U_black, F_red, F_black, h, omega);
    Au_red, Au_black = stencil_rb(U_red, U_black, [-4d, 1d] / (h * h));
    error = L2_rb(F_red - Au_red, F_black - Au_black) /
              L2_rb(F_red, F_black);
    t++;
  }
  return (U_red, U_black);
}

inline
double[n, n] v_cycle(double[n, n] F, double h)
{
  F_red, F_black = to_red_black(F);

  if (n <= 128) {
    U_red, U_black = sor_solve(F_red, F_black, h, h * h, 10000);
  } else {
    U_red = {iv -> 0d | iv < [n, n / 2]};
    U_black = {iv -> 0d | iv < [n, n / 2]};
    for (i = 0; i < 3; i++) {
      U_red, U_black = sor(U_red, U_black, F_red, F_black, h, 2d / 3d);
    }

    Au_red, Au_black = stencil_rb(U_red, U_black, [-4d, 1d] / (h * h));
    Au = from_red_black(Au_red, Au_black);
  
    r = F - Au;
    r2h = restrict(r);
    error2h = v_cycle(-r2h, 2d * h);
    error = prolongate(error2h);
    U = from_red_black(U_red, U_black);
    U = U - error;
  
    U_red, U_black = to_red_black(U);
    for (i = 0; i < 3; i++) {
      U_red, U_black = sor(U_red, U_black, F_red, F_black, h, 2d / 3d);
    }
  }

  return from_red_black(U_red, U_black);
}

int main()
{
  i_init = getInterval("init", 2);

  start(i_init);
  pi = 4d * atan(1d);
  a = 0d;
  b = 2d * pi;
  n = 16384;
  h = (b - a) / tod(n);

  F = {[i, j] -> f(a + tod(i) * h, a + tod(j) * h)
              | [i, j] < [n, n]};

  end(i_init);
  time, unit = returnResultUnit(i_init);
  printf("Initialisation took %lf %s\n", time, unit);

  i_v = getInterval("v", 2);
  start(i_v);
  U = v_cycle(F, h);
  do {
    r = F - five_point(U, h);
    U = U + v_cycle(r, h);
    printf("L2(r) = %e\n", L2(r));
  } while (L2(r) > h * h);
  end(i_v);

  Utrue = {[i, j] -> u(a + tod(i) * h, a + tod(j) * h)
                  | [i, j] < [n, n]};
  printf("Actual relative error %e\n", L2(U - Utrue) / L2(Utrue));

  time, unit = returnResultUnit(i_v);
  printf("Solving %lf GB took %lf %s.\n", 
         3d * 8d * tod(n) * tod(n) / 1e9, // U, F, r
         time,
         unit);

  return 0;
}
