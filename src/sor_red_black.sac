/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * The technique uses a Gauss-Seidel update with successive overrelaxation.
 * We use red-black ordering so we can parallelise it. This is not exactly the 
 * same as the sequential Gauss-Seidel, but the convergence is similar.
 **/

use StdIO: all;
use Math: all;
use Array: all;
use Benchmarking: all;

double f(double x, double y)
{
  return -2d * sin(x + y);
}

double u(double x, double y)
{
  return sin(x + y);
}

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

double[n, n2], double[n, n2] to_red_black(double[n, n] x)
  | (n2 == n / 2)
{
  black = {[i, j] -> x[i, 2 * j] 
                  | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
           [i, j] -> x[i, n - 2 * j - 1] 
                  | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};

  red   = {[i, j] -> x[i, 2 * j + 1]
                  | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
           [i, j] -> x[i, n - 2 * (j + 1)] 
                  | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};

  return (red, black);
}

double[n, n] from_red_black(double[n, n2] red, double[n, n2] black)
  | (n2 == n / 2)
{
  return with {
            ([0, 0] <= [i, j] < [n, n] step [2, 2]): black[i, j / 2];
            ([0, 1] <= [i, j] < [n, n] step [2, 2]): red  [i, j / 2];
            ([1, 0] <= [i, j] < [n, n] step [2, 2]): red  [i, (n - j - 1) / 2];
            ([1, 1] <= [i, j] < [n, n] step [2, 2]): black[i, (n - j) / 2];
         }: genarray([n, n], 0d);
}

/**
 * Weights are Manhattan distance to the central point, so equivalent to
 * weights [w[1], w[0], w[1]] in the more general case.
 **/
inline
double[n, n2], double[n, n2] 
stencil_rb(double[n, n2] x_red, double[n, n2] x_black, double[2] w)
{
  res_black = w[0] * x_black +
              w[1] * {[i, j] -> x_red[mod([i - 1, n2 - 1 - j], [n, n2])] +
                                x_red[mod([i    , j         ], [n, n2])] +
                                x_red[mod([i    , j  - 1    ], [n, n2])] +
                                x_red[mod([i + 1, n2 - 1 - j], [n, n2])]
                              | [i, j] < [n, n2]};

  res_red   = w[0] * x_red +
              w[1] * {[i, j] -> x_black[mod([i - 1, n2 - 1 - j], [n, n2])] +
                                x_black[mod([i    , j         ], [n, n2])] +
                                x_black[mod([i    , j  + 1    ], [n, n2])] +
                                x_black[mod([i + 1, n2 - 1 - j], [n, n2])]
                              | [i, j] < [n, n2]};
 
  return (res_red, res_black);
}

double L2_rb(double[d:shp] x, double[d:shp] y)
{
  return sqrt(sum(x * x) + sum(y * y));
}

double L2(double[d:shp] x)
{
  return sqrt(sum(x * x));
}

inline
double[n, m], double[n, m] sor(double[n, m] u_red, double[n, m] u_black,
                               double[n, m] f_red, double[n, m] f_black,
                               double h, double omega)
  | (n == 2 * m && m % 2 == 0)
{
  update_red = {[i, j] -> u_red[mod([i - 1, m - 1 - j], [n, m])] +
                          u_red[mod([i    , j        ], [n, m])] +
                          u_red[mod([i    , j  - 1   ], [n, m])] +
                          u_red[mod([i + 1, m - 1 - j], [n, m])]
                       | [i, j] < [n, m]};

  u_black = (1d - omega) * u_black +
            omega / 4d * (update_red - h * h * f_black);

  update_black = {[i, j] -> u_black[mod([i - 1, m - 1 - j], [n, m])] +
                            u_black[mod([i    , j        ], [n, m])] +
                            u_black[mod([i    , j  + 1   ], [n, m])] +
                            u_black[mod([i + 1, m - 1 - j], [n, m])]
                         | [i, j] < [n, m]};

  u_red = (1d - omega) * u_red +
          omega / 4d * (update_black - h * h * f_red);

  return (u_red, u_black);
}

inline
double[n, m], double[n, m] sor_solve(double[n, m] f_red, double[n, m] f_black,
                                     double h, int max_iter)
  | (n == 2 * m && m % 2 == 0)
{
  u_red   = {iv -> 0d | iv < [n, m]};
  u_black = {iv -> 0d | iv < [n, m]};

  pi    = 4d * atan(1d);
  omega = 2d / (1d + sin(pi * h));

  for (t = 0; t < max_iter; t++) {
    u_red, u_black = sor(u_red, u_black, f_red, f_black, h, omega);
  }

  return (u_red, u_black);
}

int main()
{
  i_sor = getInterval("sor", 2);
  start(i_sor);

  pi = 4d * atan(1d);
  a = 0d;
  b = 2d * pi;
  n = 2048;
  h = (b - a) / tod(n);
  spectral_radius = 2d / (1d + sin(pi * h)) - 1d;
  /* spectral_radius approx 1, so log is not stable */
  log_spectral_radius = log1p(-2d * sin(pi * h) / (1d + sin(pi * h)));
  /* Larger constant because convergence deteriorates significantly if omega
     is not exactly optimal, and we do have roundoff errors. */
  iter = toi(200d * log(h) / log_spectral_radius);

  F = {[i, j] -> f(a + tod(i) * h, a + tod(j) * h)
              | [i, j] < [n, n]};
  F_red, F_black = to_red_black(F);
  U = {[i, j] -> 0d | [i, j] < [n, n]};

  U_red, U_black = sor_solve(F_red, F_black, h, iter);

  end(i_sor);
  time, unit = returnResultUnit(i_sor);
  gb_moved = tod(iter) * 8d * 
              (tod(_size_A_(F_red) + _size_A_(F_black)) +     // read
              2d * tod(_size_A_(U_red) + _size_A_(U_black)))  // rfo and write
              / 1e9;
  printf("Bandwidth: %lf GB/s\n", gb_moved / time);

  Utrue = {[i, j] -> u(a + tod(i) * h, a + tod(j) * h)
                  | [i, j] < [n, n]};
  Utrue_red, Utrue_black = to_red_black(Utrue);
  printf("Relative error compared to true answer is %e\n",
          L2_rb(U_red - Utrue_red, U_black - Utrue_black) / 
          L2_rb(Utrue_red, Utrue_black));

  return 0;
}
