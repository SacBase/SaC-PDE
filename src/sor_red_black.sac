/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * The technique uses a Gauss-Seidel update with successive overrelaxation.
 * We use red-black ordering so we can parallelise it. This is not exactly the 
 * same as the sequential Gauss-Seidel, but the convergence is similar.
 **/

use StdIO: all;
use Math: all;
use Array: all;

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

/**
 * For 3D, we would have four partitions, starting at 
 * [0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0].
 **/
inline
double[n, m] stencil_even_odd(double[n, m] x, double[3, 3] we, double[3, 3] wo)
{
  return {iv -> sum({jv -> we[jv] * x[mod(iv + jv - shape(we) / 2, shape(x))]})
             | [0, 0] <= iv < [n, m] step [2, 1];
          iv -> sum({jv -> wo[jv] * x[mod(iv + jv - shape(wo) / 2, shape(x))]})
             | [1, 0] <= iv < shape(x) step [2, 1]};
}

double f(double x, double y)
{
  return -2d * sin(x + y);
}

double u(double x, double y)
{
  return sin(x + y);
}

double L2_rb(double[d:shp] x, double[d:shp] y)
{
  return sqrt((sum(x * x) + sum(y * y)) / (2d * prod(tod(shp))));
}

inline
double[n, m], double[n, m] to_red_black(double[n, n] x)
{
  black = {[i, j] -> x[i, 2 * j    ] 
                   | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
           [i, j] -> x[i, 2 * j + 1] 
                   | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};
  red = {[i, j] -> x[i, 2 * j + 1] 
                 | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
         [i, j] -> x[i, 2 * j    ] 
                 | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};

  return (red, black);
}

inline 
double[n, n] from_red_black(double[n, m] red, double[n, m] black)
{
  x = {[i, j] -> black[i, j / 2]
              | [0, 0] <= [i, j] < [n, n] step [2, 2];
       [i, j] -> black[i, j / 2]
              | [1, 1] <= [i, j] < [n, n] step [2, 2];
       [i, j] -> red[i, j / 2]
              | [0, 1] <= [i, j] < [n, n] step [2, 2];
       [i, j] -> red[i, j / 2]
              | [1, 0] <= [i, j] < [n, n] step [2, 2]};
  return x;
}

inline
double[n, m], double[n, m] sor(double[n, m] u_red, double[n, m] u_black,
                               double[n, m] f_red, double[n, m] f_black,
                               double h, double omega)
  | (n == 2 * m && m % 2 == 0)
{
  /** 
   * TODO: can we express this as a single stencil?
   **/
  w_left  = [[0d, 1d, 0d],
             [1d, 1d, 0d],
             [0d, 1d, 0d]];
  w_right = [[0d, 1d, 0d],
             [0d, 1d, 1d],
             [0d, 1d, 0d]];

  update_red = stencil_even_odd(u_red, w_left, w_right);
  u_black = (1d - omega) * u_black +
            omega / 4d * (update_red - h * h * f_black);

  update_black = stencil_even_odd(u_black, w_right, w_left);
  u_red = (1d - omega) * u_red +
          omega / 4d * (update_black - h * h * f_red);

  return (u_red, u_black);
}

int main()
{
  pi = 4d * atan(1d);
  a = 0d;
  b = 2d * pi;
  n = 2048;
  h = (b - a) / tod(n);

  F = {[i, j] -> f(a + tod(i) * h, a + tod(j) * h)
              | [i, j] < [n, n]};
  Utrue = {[i, j] -> u(a + tod(i) * h, a + tod(j) * h)
                  | [i, j] < [n, n]};
  U = {[i, j] -> 0d | [i, j] < [n, n]};

  U_red, U_black = to_red_black(U);
  F_red, F_black = to_red_black(F);
  Utrue_red, Utrue_black = to_red_black(Utrue);

  pi    = 4d * atan(1d);
  omega = 2d / (1d + sin(pi * h));
  i     = 0;
  error = 1e308;
  while (error > 1e-6)
  {
    U_red, U_black = sor(U_red, U_black, F_red, F_black, h, omega);
    if (i % 100 == 0) {
      error = L2_rb(U_red - Utrue_red, U_black - Utrue_black) / 
              L2_rb(Utrue_red, Utrue_black);
      printf("Iter %d: relative error is %e\n", i, error);
    }
    i++;
  }

  return 0;
}
