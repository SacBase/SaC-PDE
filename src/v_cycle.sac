/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * The technique uses a Gauss-Seidel update with successive overrelaxation.
 * We use red-black ordering so we can parallelise it. This is not exactly the 
 * same as the sequential Gauss-Seidel, but the convergence is similar.
 **/

use StdIO: all;
use Math: all;
use Array: all;
use Benchmarking: all;

double f(double x, double y)
{
  return -2d * sin(x + y);
}

double u(double x, double y)
{
  return sin(x + y);
}

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

/**
 * For 3D, we would have four partitions, starting at 
 * [0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0].
 **/
inline
double[n, m] stencil_even_odd(double[n, m] x, double[3, 3] we, double[3, 3] wo)
{
  return {iv -> sum({jv -> we[jv] * x[mod(iv + jv - shape(we) / 2, shape(x))]})
             | [0, 0] <= iv < [n, m] step [2, 1];
          iv -> sum({jv -> wo[jv] * x[mod(iv + jv - shape(wo) / 2, shape(x))]})
             | [1, 0] <= iv < [n, m] step [2, 1]};
}

double[n, n] five_point(double[n, n] U, double h)
{
  return stencil(U, [[0d,  1d, 0d],
                     [1d, -4d, 1d],
                     [0d,  1d, 0d]]) / (h * h);
}

double[n, m], double[n, m] five_point_rb(double[n, m] u_red, 
                                         double[n, m] u_black, 
                                         double h)
{
  w_left  = [[0d,  1d, 0d],
             [1d, -4d, 0d],
             [0d,  1d, 0d]];
  w_right = [[0d,  1d, 0d],
             [0d, -4d, 1d],
             [0d,  1d, 0d]];

  u_newblack = stencil_even_odd(u_red, w_left, w_right);
  u_red      = stencil_even_odd(u_black, w_right, w_left);

  return (u_red, u_newblack);
}

/**
 * Generates a d-dimensional grid, where elements with Manhattan-distance 
 * i to the center have weights cs[i].
 **/
inline
double[d:shp] manhattan_weights(double[d1] cs)
| (d1 == d + 1)
{
  ones = genarray([d1 - 1], 1);
  return {iv -> cs[sum(abs(iv - ones))] | iv < 3 * ones};
}

inline
double[d:shpo] fine2coarse(double[d:shpi] r)
{
  return {iv -> r[2 * iv] | iv < shpi / 2};
}

inline
double[d:shpo] coarse2fine(double[d:shpi] z)
{
  return {iv -> z[iv / 2] | iv < 2 * shpi step [2, 2]};
}

/* Interpolation */
inline
double[n2, m2] prolongate(double[n, m] x)
{
  return stencil(coarse2fine(x), manhattan_weights([1d, 1d / 2d, 1d / 4d])); 
}

/* Full-weighting operator: for P the interpolation matrix and d the
 * dimension, restrict is P^t / 2^d. */ 
inline
double[n2, m2] restrict(double[n, m] x)
{
  return fine2coarse(stencil(x, 
                             manhattan_weights([1d, 1d / 2d, 1d / 4d]) / 4d));
}

inline
double L2(double[d:shp] x)
{
  return sqrt(sum(x * x)) / tod(prod(shp));
}

inline
double[n, m], double[n, m] to_red_black(double[n, n] x)
{
  black = {[i, j] -> x[i, 2 * j    ] 
                   | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
           [i, j] -> x[i, 2 * j + 1] 
                   | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};
  red = {[i, j] -> x[i, 2 * j + 1] 
                 | [0, 0] <= [i, j] < [n, n / 2] step [2, 1];
         [i, j] -> x[i, 2 * j    ] 
                 | [1, 0] <= [i, j] < [n, n / 2] step [2, 1]};

  return (red, black);
}

noinline 
double[n, n] from_red_black(double[n, m] red, double[n, m] black)
{
  x = {[i, j] -> black[i, j / 2]
              | [0, 0] <= [i, j] < [n, n] step [2, 2];
       [i, j] -> black[i, j / 2]
              | [1, 1] <= [i, j] < [n, n] step [2, 2];
       [i, j] -> red[i, j / 2]
              | [0, 1] <= [i, j] < [n, n] step [2, 2];
       [i, j] -> red[i, j / 2]
              | [1, 0] <= [i, j] < [n, n] step [2, 2]};
  return x;
}

inline
double[n, m], double[n, m] sor(double[n, m] u_red, double[n, m] u_black,
                               double[n, m] f_red, double[n, m] f_black,
                               double h, double omega)
  | (n == 2 * m && m % 2 == 0)
{
  /** 
   * TODO: can we express this as a single stencil?
   **/
  w_left  = [[0d, 1d, 0d],
             [1d, 1d, 0d],
             [0d, 1d, 0d]];
  w_right = [[0d, 1d, 0d],
             [0d, 1d, 1d],
             [0d, 1d, 0d]];

  update_red = stencil_even_odd(u_red, w_left, w_right);
  u_black = (1d - omega) * u_black +
            omega / 4d * (update_red - h * h * f_black);

  update_black = stencil_even_odd(u_black, w_right, w_left);
  u_red = (1d - omega) * u_red +
          omega / 4d * (update_black - h * h * f_red);

  return (u_red, u_black);
}

inline
double[n, n] sor(double[n, n] u, double[n, n] f, double h, double omega)
{
  u_red, u_black = to_red_black(u); 
  f_red, f_black = to_red_black(f); 
  f_check = from_red_black(f_red, f_black); 

  u_red, u_black = sor(u_red, u_black, f_red, f_black, h, omega);

  u = from_red_black(u_red, u_black);
  return u;
}

inline
double[n, n] sor_solve(double[n, n] F, double h, double eps, int max_iter)
{
  U     = {[i, j] -> 0d | [i, j] < [n, n]};
  pi    = 4d * atan(1d);
  omega = 2d / (1d + sin(pi * h));
  error = 1e308;
  i = 0;
  while (error > eps && i < max_iter) {
    U = sor(U, F, h, omega);
    error = L2(U - F) / L2(F);
    i++;
  }
  return U;
}

inline
double[n, n] v_cycle(double[n, n] F, double h)
{
  /* TODO: residual is not necessarily periodic so this gives the incorrect
     results on the boundary. */
  if (n <= 128) {
    U = sor_solve(F, h, 1e-3, 10000);
  } else {
    U = {[i, j] -> 0d | [i, j] < [n, n]};
    U_red, U_black = to_red_black(U);
    F_red, F_black = to_red_black(F);
    for (i = 0; i < 3; i++) {
//      U = sor(U, F, h, 2d / 3d);
      U_red, U_black = sor(U_red, U_black, F_red, F_black, h, 2d / 3d);
    }
    U = from_red_black(U_red, U_black);
    F = from_red_black(F_red, F_black);
  
    r = F - five_point(U, h);
    r2h = restrict(r);
    error2h = v_cycle(-r2h, 2d * h);
    error = prolongate(error2h);
    U = U - error;
  
    U_red, U_black = to_red_black(U);
    for (i = 0; i < 3; i++) {
//      U = sor(U, F, h, 2d / 3d);
      U_red, U_black = sor(U_red, U_black, F_red, F_black, h, 2d / 3d);
    }
    U = from_red_black(U_red, U_black);
  }

  return U;
}

int main()
{
  i_init = getInterval("init", 2);

  start(i_init);
  pi = 4d * atan(1d);
  a = 0d;
  b = 2d * pi;
  n = 16384;
  h = (b - a) / tod(n);

  F = {[i, j] -> f(a + tod(i) * h, a + tod(j) * h)
              | [i, j] < [n, n]};

  end(i_init);
  time, unit = returnResultUnit(i_init);
  printf("Initialisation took %lf %s\n", time, unit);

  i_v = getInterval("v", 2);
  start(i_v);
  U = v_cycle(F, h);
  do {
    r = F - five_point(U, h);
    U = U + v_cycle(r, h);
    printf("L2(r) = %e\n", L2(r));
  } while (L2(r) > h * h);
  end(i_v);

  Utrue = {[i, j] -> u(a + tod(i) * h, a + tod(j) * h)
                  | [i, j] < [n, n]};
  printf("Actual relative error %e\n", L2(U - Utrue) / L2(Utrue));

  time, unit = returnResultUnit(i_v);
  printf("Solving %lf GB took %lf %s.\n", 
         3d * 8d * tod(n) * tod(n) / 1e9, // U, F, r
         time,
         unit);

  return 0;
}
