/**
 * This solves
 *  u_xx + u_yy = f
 * on Omega = [0, 1] x [0, 1]
 * with periodic boundary conditions.
 *
 * The technique uses a Gauss-Seidel update with successive overrelaxation.
 * We use red-black ordering so we can parallelise it.
 **/

use StdIO: all;
use Math: all;
use Array: all;
use Benchmarking: all;

inline
double[d:shp] stencil(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

double f(double x)
{
  return -sin(x);
}

double u(double x)
{
  return sin(x);
}

double L2(double[d:shp] x)
{
  return sqrt(sum(x * x));
}

double[n] to_red_black(double[n] x)
{
  return reshape([n], transpose(reshape([n / 2, 2], x)));
}

inline
double[n] sor(double[n] u, double[n] f, double h, double omega)
{
  /**
   * Matches STREAM in parallel, so all tiles, ++ etc. are optimised away.
   **/
  B2B  = (1d - omega) * tile([n / 2], [0], u);
  R2B  = omega / 2d * stencil(tile([n / 2], [n / 2], u), [1d, 1d, 0d]);
  R2R  = (1d - omega) * tile([n / 2], [n / 2], u);
  Nuf = ((B2B + R2B) ++ R2R) + omega / 2d * h * h * f; // why + and not -?

  B2B  = tile([n / 2], [0], Nuf);
  B2R  = omega / 2d * stencil(tile([n / 2], [0], Nuf), [0d, 1d, 1d]);
  R2R  = tile([n / 2], [n / 2], Nuf);

  u   = B2B ++ (B2R + R2R);
  return u;
}

int main()
{
  i_sor = getInterval("sor", 2);
  start(i_sor);

  pi = 4d * atan(1d);
  a = 0d;
  b = 2000d * pi;
  n = 2048000;
  h = (b - a) / tod(n);

  F = {[i] -> f(a + tod(i) * h) | [i] < [n]};
  Utrue = {[i] -> u(a + tod(i) * h) | [i] < [n]};
  U = {[i] -> 0d | [i] < [n]};

  U     = to_red_black(U);
  F     = to_red_black(F);
  Utrue = to_red_black(Utrue);

  pi    = 4d * atan(1d);
  omega = 2d / (1d + sin(pi * h));
  i     = 0;
  error = 1e308;
  while (error > 1e-6)
  {
    U = sor(U, F, h, omega);
    if (i % 100 == 0) {
      error = L2(U - F) / L2(F);
      printf("Iter %d: relative error is %e\n", i, error);
    }
    i++;
  }

  end(i_sor);
  time, unit = returnResultUnit(i_sor);
  gb_moved = tod(i) * 8d * 
              (prod(tod(shape(F))) +     // read
              2d * prod(tod(shape(U))))  // rfo and write
              / 1e9;
  printf("Bandwidth: %lf GB/s\n", gb_moved / time);

  return 0;
}
