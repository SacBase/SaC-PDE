/**
 * Shows how to reorder the equations of the discretization to get red-black
 * ordering. Puts the even equations at the top, and odd at the bottom. We
 * can see this as an isomorphism 
 *
 * R^(n / 2) \oplus R^(n / 2) =
 * R^(n) =
 * R^(n / 2) \oplus R^(n / 2)
 * 
 * where the first corresponds to a cyclic distribution over two processors,
 * and the second one to a block distribution. We do this for both the domain
 * (columns) and range (rows).
 **/

use Array: all;
use StdIO: all;

int main()
{
  n = 10;
  A = {iv -> 0 | iv < [n, n]};
  for (i = 0; i < n; i++) {
    A[i, i] = -2;
    A[i, mod(i + 1, n)] = 1;
    A[i, mod(i - 1, n)] = 1;
  }
  
  printf("Discretization with natural order:\n");
  print(A);

  A    = reshape([n / 2, 2, n / 2, 2], A);
  A_rb = {[i, j, k, l] -> A[j, i, l, k]};
  A_rb = reshape([n, n], A_rb);
  printf("Red black order:\n");
  print(A_rb);

  printf("We can see A as a block matrix -2I  B\n");
  printf("                               B^t  -2I\n\n");
  printf("for B =\n");

  print(tile([n / 2, n / 2], [0, n / 2], A_rb));

  return 0;
}
